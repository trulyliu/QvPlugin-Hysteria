name: QvPlugin Build Action - cmake

on: 
  push:
  release:
    types: [prereleased]

jobs:
  build:
    strategy:
      matrix:
        qt_version: [5.15.2]
        platform: [ubuntu-22.04, macos-latest, windows-latest]
        arch: [x86, x64]
        include: 
          - platform: windows-latest
            arch: x86
            qtarch: win32_msvc2019
            cmakearch: Win32
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2019_64
            cmakearch: x64
        exclude:
          - platform: ubuntu-22.04
            arch: x86
          - platform: macos-latest
            arch: x86
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Get Plugin Name
        id: get_name
        shell: bash
        run: echo ::set-output name=NAME::QvPlugin-Hysteria
      - name: Checking out sources
        uses: actions/checkout@master
      - name: Install Python 3.9 version
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          architecture: ${{ matrix.arch }}
      - name: Restoring submodules
        run: git submodule update --init
# =========================================================================================================
      - name: Install MSVC compiler
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
          arch: ${{ matrix.arch }}
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}-${{ matrix.qtarch }}
      - name: Installing Qt - ${{ matrix.arch }}
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cache-key-prefix: ${{ steps.cache-qt.outputs.cache-hit }}
          cache: true
# ========================================================================================================= Generate MakeFile and Build
      - name: Windows - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'windows-latest'
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -A ${{ matrix.cmakearch }}
          cmake --build . --parallel $(nproc) --config Release
# --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        if: matrix.platform == 'macos-latest'
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel $(sysctl -n hw.logicalcpu)
# --------------------------------------------------------
      - name: Linux - ${{ matrix.qt_version }} - Generate Dependencies and Build
        if: matrix.platform == 'ubuntu-22.04'
        shell: bash
        env:
          CC: /usr/bin/gcc-9
          CXX: /usr/bin/g++-9
          CXXFLAGS: -fno-sized-deallocation
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --parallel $(nproc)
# ========================================================================================================= Deployments
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Uploading artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.get_name.outputs.NAME }}-${{ github.sha }}.Windows-${{ matrix.arch }}.qt${{ matrix.qt_version }}.dll
          path: build/Release/${{ steps.get_name.outputs.NAME }}.dll
      - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'windows-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/Release/${{ steps.get_name.outputs.NAME }}.dll
          asset_name: ${{ steps.get_name.outputs.NAME }}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}.dll
          tag: ${{ github.ref }}
          overwrite: true
# --------------------------------------------------------
      - name: macOS - ${{ matrix.qt_version }} - Uploading Artifact
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.get_name.outputs.NAME }}-${{ github.sha }}.macOS-${{ matrix.arch }}.qt${{ matrix.qt_version }}.so
          path: build/lib${{ steps.get_name.outputs.NAME }}.so
      - name: macOS - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'macos-latest'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/lib${{ steps.get_name.outputs.NAME }}.so
          asset_name: ${{ steps.get_name.outputs.NAME }}.${{ steps.get_version.outputs.VERSION }}.macOS-${{ matrix.arch }}.so
          tag: ${{ github.ref }}
          overwrite: true
# --------------------------------------------------------
      - name: Linux - ${{ matrix.qt_version }} - Uploading artifact
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.get_name.outputs.NAME }}-${{ github.sha }}.linux-${{ matrix.arch }}.qt${{ matrix.qt_version }}.so
          path: build/lib${{ steps.get_name.outputs.NAME }}.so
      - name: Linux - ${{ matrix.qt_version }} - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'ubuntu-22.04'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/lib${{ steps.get_name.outputs.NAME }}.so
          asset_name: ${{ steps.get_name.outputs.NAME }}.${{ steps.get_version.outputs.VERSION }}.linux-${{ matrix.arch }}.so
          tag: ${{ github.ref }}
          overwrite: true
